// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: kitchen/kitchenorders/kitchen_orders.proto

package kitchenorders

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// KitchenOrdersServiceClient is the client API for KitchenOrdersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KitchenOrdersServiceClient interface {
	PutNewOrder(ctx context.Context, in *PutNewOrderRequest, opts ...grpc.CallOption) (*PutNewOrderResponse, error)
}

type kitchenOrdersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewKitchenOrdersServiceClient(cc grpc.ClientConnInterface) KitchenOrdersServiceClient {
	return &kitchenOrdersServiceClient{cc}
}

func (c *kitchenOrdersServiceClient) PutNewOrder(ctx context.Context, in *PutNewOrderRequest, opts ...grpc.CallOption) (*PutNewOrderResponse, error) {
	out := new(PutNewOrderResponse)
	err := c.cc.Invoke(ctx, "/kitchenorders.KitchenOrdersService/PutNewOrder", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KitchenOrdersServiceServer is the server API for KitchenOrdersService service.
// All implementations must embed UnimplementedKitchenOrdersServiceServer
// for forward compatibility
type KitchenOrdersServiceServer interface {
	PutNewOrder(context.Context, *PutNewOrderRequest) (*PutNewOrderResponse, error)
	mustEmbedUnimplementedKitchenOrdersServiceServer()
}

// UnimplementedKitchenOrdersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedKitchenOrdersServiceServer struct {
}

func (UnimplementedKitchenOrdersServiceServer) PutNewOrder(context.Context, *PutNewOrderRequest) (*PutNewOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutNewOrder not implemented")
}
func (UnimplementedKitchenOrdersServiceServer) mustEmbedUnimplementedKitchenOrdersServiceServer() {}

// UnsafeKitchenOrdersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KitchenOrdersServiceServer will
// result in compilation errors.
type UnsafeKitchenOrdersServiceServer interface {
	mustEmbedUnimplementedKitchenOrdersServiceServer()
}

func RegisterKitchenOrdersServiceServer(s grpc.ServiceRegistrar, srv KitchenOrdersServiceServer) {
	s.RegisterService(&KitchenOrdersService_ServiceDesc, srv)
}

func _KitchenOrdersService_PutNewOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutNewOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KitchenOrdersServiceServer).PutNewOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kitchenorders.KitchenOrdersService/PutNewOrder",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KitchenOrdersServiceServer).PutNewOrder(ctx, req.(*PutNewOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KitchenOrdersService_ServiceDesc is the grpc.ServiceDesc for KitchenOrdersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KitchenOrdersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kitchenorders.KitchenOrdersService",
	HandlerType: (*KitchenOrdersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutNewOrder",
			Handler:    _KitchenOrdersService_PutNewOrder_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "kitchen/kitchenorders/kitchen_orders.proto",
}
